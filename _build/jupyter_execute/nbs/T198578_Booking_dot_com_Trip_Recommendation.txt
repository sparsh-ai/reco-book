import pandas as pd

!wget https://github.com/sparsh-ai/reco-data/raw/master/BookingChallenge.zip
!unzip BookingChallenge.zip

train_set = pd.read_csv('train_set.csv').sort_values(by=['utrip_id','checkin'])

print(train_set.shape)
train_set.head()

test_set = pd.read_csv('test_set.csv').sort_values(by=['utrip_id','checkin'])

print(test_set.shape)
test_set.head()

# what are the top 4 most visited cities?
topcities = train_set.city_id.value_counts().index[:4]
topcities

# how many trips are there in the test set?
test_trips = (test_set[['utrip_id']].drop_duplicates()).reset_index().drop('index', axis=1)
len(test_trips)

# baseline - a simple logical rule - recommend top 4 most visitied cities to everyone
cities_prediction = pd.DataFrame([topcities]*test_trips.shape[0],
                                 columns= ['city_id_1','city_id_2','city_id_3','city_id_4'])
cities_prediction[:5]

predictions = pd.concat([test_trips, cities_prediction], axis=1)

print(predictions.shape)
predictions.head()

ground_truth = pd.read_csv('ground_truth.csv', index_col=[0])

print(ground_truth.shape)
ground_truth.head()

def evaluate_accuracy_at_4(predictions, ground_truth):
    '''checks if the true city is within the four recommended cities'''
    data = predictions.join(ground_truth, on='utrip_id')

    hits = ((data['city_id']==data['city_id_1'])|(data['city_id']==data['city_id_2'])|
        (data['city_id']==data['city_id_3'])|(data['city_id']==data['city_id_4']))*1
    return hits.mean()

evaluate_accuracy_at_4(predictions, ground_truth)

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from pandas_profiling import ProfileReport
%matplotlib inline

sns.set_theme(style="ticks")

!wget https://github.com/sparsh-ai/reco-data/raw/master/BookingChallenge.zip
!unzip BookingChallenge.zip

df = pd.read_csv('train_set.csv',
                 dtype={"user_id": str, "city_id": str, 
                        'affiliate_id': str, 'utrip_id': str},
                 date_parser=['checkin', 'checkout'])

df.head()

df['checkin']  = pd.to_datetime(df['checkin'])
df['checkout'] = pd.to_datetime(df['checkout'])
df['duration'] = (df['checkout'] - df['checkin']).dt.days

df_group_checkin = df.groupby('checkin').agg({'user_id': 'count', 'duration': 'mean'})
df_group_checkin['duration_7d'] = df_group_checkin['duration'].rolling(window=7).mean()

df_group_checkin.head()

g = sns.relplot(data=df_group_checkin, x="checkin", y="user_id", kind="line", height=6)

g = sns.relplot(data=df_group_checkin, x="checkin", y="duration_7d", kind="line", height=6)

df = df.iloc[0:1000]

df['checkin_month']      = df.checkin.dt.month
df['checkin_dayofweek']  = df.checkin.dt.dayofweek
df['checkin_quarter']    = df.checkin.dt.quarter
df['checkin_is_weekend'] = df.checkin.apply(lambda x : 1 if x.day_name in ['Saturday','Sunday'] else 0)

df['checkin_str']  = df['checkin'].astype(str)
df['checkout_str']  = df['checkout'].astype(str)
df['step'] = 1
df['step']= df.groupby(['utrip_id']).step.cumsum()

df.head()

def count_hotel(hotel_country):
    return len(list(np.unique(hotel_country)))

def list_without_last(itens):
    return list(itens[:-1])

def list_without_last_and_pad(pad=5, dtype=int):
    def add_pad(items): 
        arr = list_without_last(items)
        arr = list(([dtype(0)] * (pad - len(arr[-pad:])) + arr[-pad:])) 
        return arr
    return add_pad

df_trip = df.sort_values(['checkin']).groupby(['utrip_id']).agg(
    user_id=('user_id', 'first'),
    count_unique_city=('city_id', count_hotel),
    trip_size=('checkin', len),
    start_trip=('checkin', 'first'),
    checkin_list=('checkin_str', list_without_last_and_pad(5, str)),
    checkout_list=('checkout', list_without_last_and_pad(5)),
    duration_list=('duration', list_without_last_and_pad(5, int)),
    city_id_list=('city_id', list_without_last_and_pad(5, str)),
    device_class_list=('device_class', list_without_last_and_pad(5, str)),
    affiliate_id_list=('affiliate_id', list_without_last_and_pad(5, str)),
    booker_country_list=('booker_country', list_without_last_and_pad(5, str)),
    hotel_country_list=('hotel_country', list_without_last_and_pad(5, str)),
    step_list=('step', list_without_last_and_pad(5, int)),
    last_city_id=('city_id', 'last')
)

df_trip['end_trip']  = df_trip['checkout_list'].apply(lambda x: x[-1] if len(x) > 1 else None)
df_trip = df_trip.loc[df_trip['end_trip']!=0,:]
df_trip['end_trip'] = pd.to_datetime(df_trip['end_trip'])
df_trip['duration']  = (df_trip['end_trip'] - df_trip['start_trip']).dt.days

df_trip.head()

df_city_group = df.groupby('city_id').agg({'checkin': 'count', 'duration': 'mean'})\
                    .sort_values('checkin',ascending=False)

df_city_month_group = df.groupby(['city_id', 'checkin_month']).agg({'checkin': 'count', 'duration': 'mean'})\
                    .reset_index().sort_values(['city_id', 'checkin_month', 'checkin'],ascending=False)

city_idx = list(df_city_group.index)[:50]

df_plot  = df_city_month_group[df_city_month_group.city_id.isin(city_idx)]

grid     = sns.FacetGrid(df_plot, col="city_id", hue="city_id", palette="tab20c",
                     col_wrap=5, height=2.5)
grid.map(plt.plot, "checkin_month", "checkin", marker="o")
grid.fig.tight_layout(w_pad=1)

def count_hotel(hotel_country):
    return len(list(np.unique(hotel_country)))

def join_city(city):
    return "_".join(list(city))

df_utrip_id_group = df.groupby('utrip_id').agg({'checkin': 'count', 
                                                'duration': ['mean', 'sum'], 
                                                'hotel_country': count_hotel,
                                                'city_id': join_city})
df_utrip_id_group.columns = ["_".join(pair) for pair in df_utrip_id_group.columns]
df_utrip_id_group = df_utrip_id_group.sort_values('checkin_count', ascending=False)

df_utrip_id_group['multiply_country'] = (df_utrip_id_group['hotel_country_count_hotel'] > 1).astype(int)

sns.pairplot(df_utrip_id_group, hue="multiply_country")
